# ==================================================== Реалізація багатопоточності клас Condition.=========================================
# Condition - клас для управління потоками . використовується коли наперед є визначенна умова за якою буде виконуватись потік.

from threading import Thread, Condition
import logging
from time import sleep

def master(con:Condition) : # функція яка приймає один аргумент екзепляр  класу *Condition, функція в якій реалізовано наш основний потік.
    
    logging.info("Master is working...") # Принтанемо "Master is working..."
    sleep(1) # Встановлюємо затримку виконання коду на 1 мс.
    with con :# менеджер контексту запускає виконання потоку  коли виконається умова *con і обовязково завершить потік після його виконання
        logging.info("Прийшов час працювати") # Виводимо в лог "Прийшов час працювати"
        con.notify_all() # Метод *екзепляр_класу_Condition.notify_all() - умова запуску додаткових потоків

def worker(con:Condition): # функція яка приймає один аргумент екзепляр  класу *Condition, функція в якій реалізовано наш додатковий потік,
                         # який буде запускатися з дозволу основного потоку функції *master(con:Condition)

    logging.info("Waiting ")# Вивід повіомлення про очікування додаткового потоку на виконання 
    with con: # менеджер контексту запускає виконання потоку  коли виконається умова *con і обовязково завершить потік після його виконання  
        con.wait() #За допомогою методу  *.wait() - метод дозволяє додатковому потоку очікувати на запуск після дозволу в основному .
        logging.info(f"Start worker ") ## Вивід повіомлення про роботу  додаткового потоку після дозволу з основного потоку.


if __name__ == "__main__":

    logging.basicConfig(level=logging.DEBUG, format="%(threadName)s %(message)s") # вбудована функція для логування  потоків за їх іменем *%(threadName)s 
    
    con = Condition() # Створення *пустого екзепляру класу *Condition Примітка : пустий означає 

    mast = Thread(target=master, args=(con,)) # Реалізація мастер потоку екзепляру класу *Thread який запустить в додатковому  потоці функціію *master(con)
                                                # з одним аргументом *event - *пустим екзепляром класу *Condition()

    work1 = Thread(target=worker, args=(con,))# Реалізація залежного потоку екзепляру класу *Thread який запуститься в потоці функціію *worker(con) після того як завершить роботу основний потік *master(con)
                                                # з одним аргументом *event - *пустим екзепляром класу *Condition()
    work2 = Thread(target=worker, args=(con,))  # Щеодин залежний поків
    work3 = Thread(target=worker, args=(con,))  # Щеодин залежний поків


    work1.start() # Стартуємо перший залежний потік
    work2.start() # Стартуємо другий залежний потік
    work3.start() # Стартуємо третій залежний потік
    sleep(0.5)    # встановлюємо паузу в 0.5 сек

    mast.start() # Після запуску залежних потоків запускаємо основний потік. Дивись результат нижче

# ++++++++++++++++++++++++++++++++++ Результат роботи коду ++++++++++++++++++++++++++++++++++++++++++++++

# Thread-2 (worker) Waiting # Очікує на дозвіл від основного потоку 
# Thread-3 (worker) Waiting # Очікує на дозвіл від основного потоку 
# Thread-4 (worker) Waiting # Очікує на дозвіл від основного потоку 
# Thread-1 (master) Master is working... # запуск основного потоку 
# Thread-1 (master) Прийшов час працювати # команда worker-ам почати роботу 
# Thread-2 (worker) Start worker # запуск першого залежного потоку 
# Thread-4 (worker) Start worker # запуск другого залежного потоку
# Thread-3 (worker) Start worker # запуск третього залежного потоку