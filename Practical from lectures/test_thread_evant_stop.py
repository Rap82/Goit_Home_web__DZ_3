# ==================================================== Реалізація багатопоточності класу EVANT(Зупинка виконаня залежного процесу).=========================================
# Evant - клас для управління потоками . Можна визначати який потік є основний а які залежні.

from threading import Thread, Event

import logging
from time import sleep



def worker(event:Event): # функція яка приймає один аргумент екзепляр  класу *Event, функція в якій реалізовано наш додатковий потік,
                         # який буде запускатися з дозволу основного потоку функції *master(event:Event) через методом *event.set()
                         # виконує свої дії тільки після дозволу мастера.
    while True :
        if event.is_set(): # Умова зупинки виконання *worker(event:Event) як тільки основний потік мастер дасть команду, виконання воркера завершиться 
                           # В нашому випадку це 5 сек . 
            break
        
        sleep(1) # встановлюємо паузу в 1 сек .
        logging.info(f"DDos server")# Вивід повіомлення про очікування додаткового потоку на виконання.
    


if __name__ == "__main__":

    logging.basicConfig(level=logging.DEBUG, format="%(threadName)s %(message)s") # вбудована функція для логування  потоків за їх іменем *%(threadName)s 
    
    event = Event() # Створення *пустого екзепляру класу *Event Примітка : пустий означає 

    
    work1 = Thread(target=worker, args=(event,))# Реалізація залежного потоку екзепляру класу *Thread який запуститься в потоці функціію *worker_prostyj(event) після того як завершить роботу основний потік *master(event)
                                                # з одним аргументом *event - *пустим екзепляром класу *Event()
    
    work1.start() # Стартуємо перший залежний потік
  
    sleep(5)    # встановлюємо паузу в 2 сек

    event.set() # дозвіл на запуск додаткових потоків як складного так і простого. Примітка: мастером буде виступати основний код 
    logging.info("End program")

# ++++++++++++++++++++++++++++++++++ Результат роботи коду ++++++++++++++++++++++++++++++++++++++++++++++
# Thread-1 (worker) DDos server
# Thread-1 (worker) DDos server
# Thread-1 (worker) DDos server
# Thread-1 (worker) DDos server
# MainThread End program
# Thread-1 (worker) DDos server

# Як бачимо з результатів , 
# виведеться 5 повідомлень оскільки вони виводяться що сек а пауза в основному коді main 5 сек. *sleep(5). 
# незважаючи на те що worker має безкінечний цикл він буде зупинений коли мастер дасть команду на виконаня .
